" Install vim-plug if not found
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif


call plug#begin('~/.local/share/nvim/plugged')
    " Icons for statusline
    Plug 'kyazdani42/nvim-web-devicons'

    " Elixir integration
    Plug 'elixir-editors/vim-elixir'

    " Automatically add end in e.g. elixir
    Plug 'tpope/vim-endwise'

    " ~><>
    Plug 'dag/vim-fish'

    " Info docs in vim
    Plug 'HiPhish/info.vim'

    " Let's get keybinding
    Plug 'folke/which-key.nvim'

    " Treesitter
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

    " " org-mode, wow!
    " Plug 'vhyrro/neorg' | Plug 'nvim-lua/plenary.nvim'

    " Visual yanking
    Plug 'machakann/vim-highlightedyank'

    " Token matching extension
    Plug 'andymass/vim-matchup'

    " Need I say more?
    Plug 'rust-lang/rust.vim'

    " Git
    Plug 'tpope/vim-fugitive'

    " Git gutter
    Plug 'airblade/vim-gitgutter'

    " clang-format
    Plug 'rhysd/vim-clang-format'

    " CHADTree
    Plug 'ms-jpq/chadtree'

    " Lualine
    Plug 'nvim-lualine/lualine.nvim'

    " Buffer-line
    Plug 'akinsho/bufferline.nvim'

    " Material Colorscheme 
    Plug 'marko-cerovac/material.nvim'

call plug#end()

" Automatically install missing plugins
" https://github.com/junegunn/vim-plug/wiki/extra#automatically-install-missing-plugins-on-startup
autocmd VimEnter *
    \   if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \|      PlugInstall --sync | q
    \|  endif

set termguicolors

lua << EOF
require("which-key").setup { }

local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

parser_configs.norg = {
    install_info = {
        url = "https://github.com/vhyrro/tree-sitter-norg",
        files = { "src/parser.c", "src/scanner.cc" },
        branch = "main"
    },
}

require('nvim-treesitter.configs').setup {
    ensure_installed = { "norg", "haskell", "cpp", "c", "javascript"},
}

require('material').setup {
    high_visibility = {
        darker = true,
    },
    disable = {
        background = true,
    },
}

require('lualine').setup {
    options = { 
        theme = 'material-stealth', 
    }
}

require('bufferline').setup{}
EOF

" Set colorscheme
let g:material_style = "darker"
colorscheme material
